#
# This file is part of the linuxpy project
#
# Copyright (c) 2023 Tiago Coutinho
# Distributed under the GPLv3 license. See LICENSE for more info.

import pathlib

from linuxpy.codegen.base import CEnum, run

HEADERS = [
    "/usr/include/sound/asequencer.h",
]


TEMPLATE = """\
#
# This file is part of the linuxpy project
#
# Copyright (c) 2023 Tiago Coutinho
# Distributed under the GPLv3 license. See LICENSE for more info.

# This file has been generated by {name}
# Date: {date}
# System: {system}
# Release: {release}
# Version: {version}

import enum

from linuxpy.ioctl import IOR as _IOR, IOW as _IOW, IOWR as _IOWR
from linuxpy.ctypes import u8, u16, cuint, cint, cchar
from linuxpy.ctypes import Struct, Union, POINTER, cvoidp


class ClientType(enum.IntEnum):
    NO_CLIENT = 0
    USER = 1
    KERNEL = 2


{enums_body}


snd_seq_tick_time_t = cuint


class snd_seq_real_time(Struct):
    _fields_ = [
        ("tv_sec", cuint),
        ("tv_nsec", cuint),
    ]


# Defined in /usr/include/sound/asound.h
class snd_timer_id(Struct):
    _fields_ = [
        ("dev_class", cint),
        ("dev_sclass", cint),
        ("card", cint),
        ("device", cint),
        ("subdevice", cint),
    ]


{structs_body}


{iocs_body}"""


# macros from #define statements
MACRO_ENUMS = [
    CEnum("EventLength", "SNDRV_SEQ_EVENT_LENGTH_"),
    CEnum("TimeStamp", "SNDRV_SEQ_TIME_STAMP_", klass="IntFlag"),
    CEnum("TimeMode", "SNDRV_SEQ_TIME_MODE_", klass="IntFlag"),
    CEnum("Priority", "SNDRV_SEQ_PRIORITY_", klass="IntFlag"),
    CEnum("EventType", "SNDRV_SEQ_EVENT_"),
    CEnum("ClientNumber", "SNDRV_SEQ_CLIENT_"),
    CEnum("Filter", "SNDRV_SEQ_FILTER_", klass="IntFlag"),
    CEnum("Remove", "SNDRV_SEQ_REMOVE_", klass="IntFlag"),
    CEnum("PortSystem", "SNDRV_SEQ_PORT_SYSTEM_", klass="IntFlag"),
    CEnum("PortCapability", "SNDRV_SEQ_PORT_CAP_", klass="IntFlag"),
    CEnum("PortType", "SNDRV_SEQ_PORT_TYPE_", klass="IntFlag"),
    CEnum("PortFlag", "SNDRV_SEQ_PORT_FLG_", klass="IntFlag"),
    CEnum("QueueFlag", "SNDRV_SEQ_QUEUE_FLG_", klass="IntFlag"),
    CEnum("Timer", "SNDRV_SEQ_TIMER_"),
    CEnum("QuerySubscription", "SNDRV_SEQ_QUERY_SUBS_"),
    CEnum("IOC", "SNDRV_SEQ_IOCTL_"),
]


this_dir = pathlib.Path(__file__).parent


def main(output=this_dir.parent / "midi" / "raw.py"):
    run(__name__, HEADERS, TEMPLATE, MACRO_ENUMS, output=output)


if __name__ == "__main__":
    main()
