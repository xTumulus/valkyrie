# run with:
#

import datetime
import logging
import pathlib
import platform
import pprint
import subprocess

import requests

this_dir = pathlib.Path(__file__).parent


USB_IDS = "http://www.linux-usb.org/usb.ids"


def get_raw(url: str = USB_IDS) -> str:
    response = requests.get(url)
    response.raise_for_status()
    return response.text


TYPES = {
    "V": "vendor",
    "C": "klass",
    "AT": "audio_terminal",
    "HID": "hid",
    "R": "hid_item",
    "BIAS": "bias",
    "PHYS": "physical",
    "HUT": "hid_usage",
    "L": "language",
    "HCC": "country",
    "VT": "video_terminal",
}


def get(url: str = USB_IDS) -> dict[int,]:
    logging.info("  Fetching usbids...")
    raw = get_raw(url=url)

    items = {}
    l0, l1 = None, None
    for line in raw.splitlines():
        if line.startswith("#"):
            continue
        if line.startswith("\t\t"):  # Interface, protocol, etc
            l2_id, l2_name = line.strip().split("  ", 1)
            l2_id = int(l2_id, 16)
            l2 = {"name": l2_name}
            l1.setdefault("children", {})[l2_id] = l2
        elif line.startswith("\t"):  # Device, subclass
            l1_id, l1_name = line.strip().split("  ", 1)
            l1_id = int(l1_id, 16)
            l1 = {"name": l1_name}
            l0.setdefault("children", {})[l1_id] = l1
        elif line:  # Vendor, class, audio terminal, etc
            l0_id, l0_name = line.split("  ", 1)
            if " " in l0_id:
                itype, l0_id = l0_id.split(" ", 1)
            else:
                itype = "V"  # Vendors don't have prefix
            l0_id = int(l0_id, 16)
            l0 = {"name": l0_name}
            type_label = TYPES.get(itype, itype.lower())
            items.setdefault(type_label, {})[l0_id] = l0

    return items


HEADER = """\
# This file is part of the linuxpy project
#
# Copyright (c) 2023 Tiago Coutinho
# Distributed under the GPLv3 license. See LICENSE for more info.

# This file has been generated by {name}
# Date: {date}
# System: {system}
# Release: {release}
# Version: {version}

"""


def code_format(text, filename):
    cmd = ["ruff", "check", "--fix", "--stdin-filename", str(filename)]
    result = subprocess.run(cmd, capture_output=True, check=True, text=True, input=text)
    fixed_text = result.stdout

    cmd = ["ruff", "format", "--stdin-filename", str(filename)]
    result = subprocess.run(cmd, capture_output=True, check=True, text=True, input=fixed_text)
    return result.stdout


def dump_item(item, name, output):
    logging.info("  Building %s...", name)
    output = pathlib.Path(output)
    fields = {
        "name": "linuxpy.codegen.usbids",
        "date": datetime.datetime.now(),
        "system": platform.system(),
        "release": platform.release(),
        "version": platform.version(),
    }
    text = HEADER.format(**fields)
    items = {name: item}
    fields = [f"{item} = {pprint.pformat(values)}\n\n" for item, values in items.items()]
    text += "\n".join(fields)

    logging.info("  Applying ruff to %s...", name)
    text = code_format(text, output)

    logging.info("  Writting %s...", name)
    if output is None:
        print(text, end="", flush=True)
    else:
        with output.open("w") as fobj:
            print(text, end="", flush=True, file=fobj)


def dump_items(items, output=this_dir.parent / "usb" / "ids"):
    logging.info("  Building usbids...")
    output = pathlib.Path(output)
    for name, data in items.items():
        dump_item(data, name, output / (name + ".py"))


def main():
    logging.basicConfig(level="INFO")
    logging.info("Starting %s...", __name__)
    items = get()
    dump_items(items)
    logging.info("Finished %s!", __name__)


if __name__ == "__main__":
    main()
